name: Nightly Deployment

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  nightly-build-and-test:
    runs-on: ubuntu-latest

    
    steps:
    - name: Checkout Infra Repo
      uses: actions/checkout@v4
      with:
        path: infra

    - name: Checkout Source Repo
      uses: actions/checkout@v4
      with:
        path: source
        repository: erudman21/reactjs-go-mysql-sample-app
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push initial images to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        cd source/frontend
        docker build -t $ECR_REGISTRY/midterm/frontend:${{ github.sha }} .
        docker push $ECR_REGISTRY/midterm/frontend:${{ github.sha }}
        
        cd ../backend
        docker build -t $ECR_REGISTRY/midterm/backend:${{ github.sha }} .
        docker push $ECR_REGISTRY/midterm/backend:${{ github.sha }}

    - name: Debug directories
      run: |
        echo "Current directory: $(pwd)"
        echo "Contents of current directory:"
        ls -la

    - name: Prepare user data script
      run: |
        DOCKER_COMPOSE_CONTENT=$(cat infra/docker-compose-with-images.yml)
        SQL_INIT_CONTENT=$(cat source/database/init.sql)
      
        mkdir -p database

        # Bake values into user-data script
        cat infra/scripts/user-data.sh | \
          sed "s/\${ECR_REGISTRY}/${{ steps.login-ecr.outputs.registry }}/g" | \
          sed "s/\${IMAGE_TAG}/${{ github.sha }}/g" > userdata-final.sh

    - name: Launch temp EC2 instance for testing
      id: launch-ec2
      run: |
        # Launch EC2 instance
        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ami-05b10e08d247fb927 \
          --instance-type t2.micro \
          --user-data file://userdata-final.sh \
          --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=temp-smoke-test}]' \
          --query 'Instances[0].InstanceId' \
          --output text)
        
        echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
        
        # Wait for instance to be running
        aws ec2 wait instance-running --instance-ids $INSTANCE_ID

        # Get public IP address for smoke tests
        PUBLIC_IP=$(aws ec2 describe-instances \
          --instance-ids $INSTANCE_ID \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        
        echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
        
        # Add time for the user data script to finish
        sleep 180

    - name: Run smoke tests
      id: run-smoke-tests
      env:
        EC2_IP: ${{ steps.launch-ec2.outputs.public_ip }}
      run: |
        chmod +x infra/scripts/smoke_test.sh
        ./infra/scripts/smoke_test.sh

    - name: Tag successful images as latest
      if: ${{ success() && steps.run-smoke-tests.outcome == 'success' }}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Frontend image
        MANIFEST=$(aws ecr batch-get-image --repository-name midterm/frontend --image-ids imageTag=${{ github.sha }} --query 'images[].imageManifest' --output text)
        aws ecr put-image --repository-name midterm/frontend --image-tag latest --image-manifest "$MANIFEST"
        
        # Backend image
        MANIFEST=$(aws ecr batch-get-image --repository-name midterm/backend --image-ids imageTag=${{ github.sha }} --query 'images[].imageManifest' --output text)
        aws ecr put-image --repository-name midterm/backend --image-tag latest --image-manifest "$MANIFEST"

    - name: Delete image from ECR when tests fail
      if: ${{ failure() && steps.run-smoke-tests.outcome == 'failure' }}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        aws ecr batch-delete-image --repository-name midterm/frontend --image-ids imageTag=${{ github.sha }}
        aws ecr batch-delete-image --repository-name midterm/backend --image-ids imageTag=${{ github.sha }}

    - name: Terminate temp EC2 instance
      if: always()
      env:
        INSTANCE_ID: ${{ steps.launch-ec2.outputs.instance_id }}
      run: |
        aws ec2 terminate-instances --instance-ids $INSTANCE_ID
    
    - name: Deploy to QA
      run: true