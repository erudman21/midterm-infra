name: Nightly Deployment

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  nightly-build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Infra Repo
      uses: actions/checkout@v4
      with:
        path: infra

    - name: Checkout Source Repo
      uses: actions/checkout@v4
      with:
        path: source
        repository: erudman21/reactjs-go-mysql-sample-app
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push initial images to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Build and push images to ECR
        cd source/frontend
        docker build --build-arg API_URL=/api/users -t $ECR_REGISTRY/midterm/frontend:${{ github.sha }} .
        docker push $ECR_REGISTRY/midterm/frontend:${{ github.sha }}
        
        cd ../backend
        docker build -t $ECR_REGISTRY/midterm/backend:${{ github.sha }} .
        docker push $ECR_REGISTRY/midterm/backend:${{ github.sha }}

    - name: Prepare deployment package
      run: |
        mkdir -p deployment_package
        mkdir -p deployment_package/database

        cat > deployment_package/env.sh << EOF
          #!/bin/bash
          # Environment variables for deployment
          export ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
          export IMAGE_TAG=${{ github.sha }}
          export LAMBDA_ARN=${{ secrets.LAMBDA_ARN }}
        EOF
        
        # Copy scripts and config files
        cp infra/scripts/setup.sh deployment_package/
        cp infra/scripts/deploy.sh deployment_package/
        cp infra/docker-compose.yml deployment_package/
        cp infra/scripts/smoke_test.sh deployment_package/
        cp infra/database/init.sql deployment_package/database/
        
        # Make scripts executable
        chmod +x deployment_package/*.sh
        
        # Create zip file
        cd deployment_package
        zip -r ../deployment.zip *
        cd ..

    - name: Launch temp EC2 instance for testing
      id: launch-ec2
      run: |
        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ami-05b10e08d247fb927 \
          --instance-type t2.micro \
          --user-data file://infra/scripts/user-data.sh \
          --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=temp-smoke-test}]' \
          --query 'Instances[0].InstanceId' \
          --security-group-ids ${{ secrets.TEMP_EC2_SECURITY_GROUP }} \
          --subnet-id ${{ secrets.PUBLIC_SUBNET_ID }} \
          --associate-public-ip-address \
          --key-name aws_desktop \
          --output text)
        
        echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
        
        # Wait for instance to be running
        aws ec2 wait instance-running --instance-ids $INSTANCE_ID

        PUBLIC_IP=$(aws ec2 describe-instances \
          --instance-ids $INSTANCE_ID \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        
        echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
        
        scp -o StrictHostKeyChecking=no -i ${{ secrets.SSH_KEY }} deployment.zip ec2-user@$PUBLIC_IP:~/
        
        ssh -o StrictHostKeyChecking=no -i ${{ secrets.SSH_KEY }} ec2-user@$PUBLIC_IP << 'ENDSSH'
          mkdir -p deployment
          unzip -o deployment.zip -d deployment
          cd deployment
          chmod +x *.sh
          ./deploy.sh
        ENDSSH