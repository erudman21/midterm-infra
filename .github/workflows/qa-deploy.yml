name: QA Deployment

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
      run_id:
        description: 'Originating workflow run ID'
        required: true

jobs:
  deploy-to-qa:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.QA_SERVER_IP }} >> ~/.ssh/known_hosts

    - name: Deploy to QA environment
      run: |
        # Run deployment commands on the QA server
        ssh ec2-user@${{ secrets.QA_SERVER_IP }} << ENDSSH
          export ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          export IMAGE_TAG=${{ github.event.inputs.image_tag }}
          export RDS_ENDPOINT=${{ secrets.RDS_ENDPOINT }}
          export DB_USER=${{ secrets.DB_USER }}
          export DB_PASS=${{ secrets.DB_PASS }}
          export DB_NAME=${{ secrets.DB_NAME }}

          sudo mkdir -p ~/.aws && echo "[default]
          aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}" | sudo tee ~/.aws/credentials > /dev/null

          # Login to ECR
          aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin \$ECR_REGISTRY

          cd ~/app
          sudo docker compose down
          sudo ECR_REGISTRY=${ECR_REGISTRY} IMAGE_TAG=${IMAGE_TAG} docker compose up -d
          
          # Check if Nginx is running, restart if needed
          if ! systemctl is-active --quiet nginx; then
            sudo systemctl restart nginx
          fi
          
          echo "Deployment completed at $(date)"
        ENDSSH

    - name: Update nightly workflow status
      if: always()
      env:
        GH_TOKEN: ${{ secrets.DEPLOY_PAT }}
        RUN_ID: ${{ github.event.inputs.run_id }}
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "QA deployment successful"
        else
          echo "QA deployment failed"
        fi